from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types.message import Message
from states import States
import sqlite3


bot = Bot(token='6242052520:AAHeAksmvtXr2GF8VGCKZStrcvnqy-lrFg0')
dp = Dispatcher(bot,storage=MemoryStorage())

conn = sqlite3.connect('db.db', check_same_thread=False)
cursor = conn.cursor()



@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Çüëã\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ - –≤–≤–µ–¥–∏—Ç–µ /commands")

@dp.message_handler(commands=['commands', 'help'])
async def help(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:")

    inline_keyboard = types.InlineKeyboardMarkup()

    buttons = [
        types.InlineKeyboardButton(text="/select", callback_data="select"),
        types.InlineKeyboardButton(text="/insert", callback_data="insert"),
        types.InlineKeyboardButton(text="/info", callback_data="info"),
    ]

    inline_keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)

@dp.callback_query_handler(text="select")
async def select(call: types.CallbackQuery):
    inline_keyboard = types.InlineKeyboardMarkup()

    buttons = [
        types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="select_goods"),
        types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="select_users"),
    ]

    inline_keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)

@dp.callback_query_handler(text="select_goods")
async def select_goods(call: types.CallbackQuery):
    cursor.execute("SELECT * FROM goods")
    rows = cursor.fetchall()

    result = ''

    for row in rows:
        result += f'ID –¢–æ–≤–∞—Ä–∞: {row[0]}\n–¢–æ–≤–∞—Ä: {row[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[2]}\n–¶–µ–Ω–∞: {row[3]}\n\n'
    await bot.send_message(call.message.chat.id, result)
    await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                              "/commands")


@dp.callback_query_handler(text="select_users")
async def select_users(call: types.CallbackQuery):
    cursor.execute("SELECT * FROM users")
    rows = cursor.fetchall()

    result = ''

    for row in rows:
        result += f'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {row[0]}\n–õ–æ–≥–∏–Ω: {row[1]}\n–í–æ–∑—Ä–∞—Å—Ç: {row[2]}\n\n'
    await bot.send_message(call.message.chat.id, result)
    await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                              "/commands")


@dp.callback_query_handler(text="insert")
async def select(call: types.CallbackQuery):
    inline_keyboard = types.InlineKeyboardMarkup()

    buttons = [
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data="insert_goods"),
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="insert_users")
    ]

    inline_keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)


@dp.callback_query_handler(text="insert_goods")
async def insert_goods(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await States.get_title.set()

@dp.message_handler(state=States.get_title)
async def get_title(message: Message, state: FSMContext):
    title = message.text
    await state.update_data(
        {
            'title': title,
        }
    )
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    await States.next()

@dp.message_handler(state=States.get_description)
async def get_description(message: Message, state: FSMContext):
    description = message.text
    await state.update_data(
        {
            'description': description,
        }
    )
    await message.answer('–¶–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:')
    await States.next()

@dp.message_handler(state=States.get_price)
async def get_price(message: Message, state: FSMContext):
    price = message.text
    await state.update_data(
        {
            'price': price,
        }
    )
    data = await state.get_data()
    cursor.execute(f"INSERT INTO goods (title, description, price) VALUES('{data['title']}', '{data['description']}', '{data['price']}')")
    conn.commit()
    await message.answer(f'–£—Å–ø–µ—à–Ω–æ!‚úÖ\n–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {data["title"]}Ô∏è\n–û–ø–∏—Å–∞–Ω–∏–µ: {data["description"]}\n–¶–µ–Ω–∞: {data["price"]}')
    await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                         "/commands")
    await state.finish()





@dp.callback_query_handler(text="insert_users")
async def insert_goods(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await States.get_username.set()

@dp.message_handler(state=States.get_username)
async def get_username(message: Message, state: FSMContext):
    username = message.text
    await state.update_data(
        {
            'username': username,
        }
    )
    await message.answer('–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await States.next()

@dp.message_handler(state=States.get_age)
async def get_age(message: Message, state: FSMContext):
    age = message.text
    await state.update_data(
        {
            'age': age,
        }
    )
    data = await state.get_data()
    cursor.execute(
        f"INSERT INTO users (username, age) VALUES('{data['username']}', '{data['age']}')")
    conn.commit()
    await message.answer(
        f'–£—Å–ø–µ—à–Ω–æ!‚úÖ\n–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data["username"]}\n–í–æ–∑—Ä–∞—Å—Ç: {data["age"]}')
    await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                         "/commands")
    await state.finish()






@dp.callback_query_handler(text="info")
async def info(call: types.CallbackQuery):
    await call.message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n/select - –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã\n/insert - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É")
    await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                         "/commands")


executor.start_polling(dp, skip_updates=True)
conn.close()
